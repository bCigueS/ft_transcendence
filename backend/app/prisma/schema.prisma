generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:123@postgres:5432/postgres?schema=public"
}

model User {
  id        Int          @id @default(autoincrement())

  email     String
  name      String       @unique
  password  String
  avatar    String?       @default("default.jpg")
  
  friends   Friendship[]  @relation(name: "friends")
  followers Friendship[]  @relation(name: "followers")

  blocked   Block[]  @relation(name: "blocked")
  haters    Block[]  @relation(name: "haters")
  
  @@map("users")
}

model Friendship {
  id        Int  @id @default(autoincrement())

  MyId      Int
  friendId  Int
  friends   User @relation(name: "friends", fields: [friendId], references: [id])
  followers User @relation(name: "followers", fields: [MyId], references: [id])
 
  @@map("friends")
}

model Block {
  id        Int  @id @default(autoincrement())

  MyId      Int
  blockedId Int
  blocked   User @relation(name: "blocked", fields: [blockedId], references: [id])
  haters     User @relation(name: "haters", fields: [MyId], references: [id])
 
  @@map("blocked")
}

// model Game {
//   id            Int      @id @default(autoincrement())
//   createdAt     DateTime @default(now())

//   type          GameType
//   level         Int
//   state         GameState

//   player1Id     Int
//   player1       User     @relation("Player1Games", fields: [player1Id], references: [id])
//   player2Id     Int?
//   player2       User?    @relation("Player2Games", fields: [player2Id], references: [id])

//   scorePlayer1  Int
//   scorePlayer2  Int

//   winnerId      Int?
//   winner        User?    @relation("WinnerGames", fields: [winnerId], references: [id])

//   duration      Int

//   @@map("games")
// }

// enum GameType {
//   PLAYER
//   COMPUTER
// }

// enum GameState {
//   PENDING
//   PLAYING
//   FINISHED
// }
